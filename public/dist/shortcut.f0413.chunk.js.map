{"version":3,"sources":["webpack:///shortcut.f0413.chunk.js","webpack:///./src/dashboard/utils/shortcut.js"],"names":["webpackJsonp","340","module","exports","__webpack_require__","keyboardDefault","fullScreen","homePage","endPage","previousPage","nextPage","1","2","3","all_shortcuts","add","shortcut_combination","callback","opt","default_options","type","propagate","disable_in_input","target","document","keycode","dfo","ele","getElementById","toLowerCase","func","e","window","event","element","srcElement","nodeType","parentNode","tagName","code","keyCode","which","character","String","fromCharCode","keys","split","kp","shift_nums","`","4","5","6","7","8","9","0","-","=",";","'",",",".","/","\\","special_keys","esc","escape","tab","space","return","enter","backspace","scrolllock","scroll_lock","scroll","capslock","caps_lock","caps","numlock","num_lock","num","pause","break","insert","home","delete","end","pageup","page_up","pu","pagedown","page_down","pd","left","up","right","down","f1","f2","f3","f4","f5","f6","f7","f8","f9","f10","f11","f12","modifiers","shift","wanted","pressed","ctrl","alt","meta","ctrlKey","shiftKey","altKey","metaKey","k","i","length","cancelBubble","returnValue","stopPropagation","preventDefault","this","addEventListener","attachEvent","remove","binding","detachEvent","removeEventListener"],"mappings":"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","file":"shortcut.f0413.chunk.js","sourcesContent":["webpackJsonp([9],{\n\n/***/ 340:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// module.exports = '测试方面指令';\n\n/**\n * 功能：快捷键\n * 作者：Abbott.liu\n * 时间：2017年11月23日\n * 描述：参考shortcut.js改写\n */\n\n// 默认的快捷键\n\n\nmodule.exports = {\n    // 默认的快捷键\n    'keyboardDefault': {\n        fullScreen: 'Ctrl+E',\n        homePage: 'Up', // 直接返回首页\n        endPage: 'Down',\n        previousPage: 'left',\n        nextPage: 'right',\n        1: '1', //跳转到第一页\n        2: '2', //跳转到第一页\n        3: '3' //跳转到第一页\n    },\n    'all_shortcuts': {},\n    'add': function add(shortcut_combination, callback, opt) {\n        //Provide a set of default options\n        // 提供参数\n        var default_options = {\n            'type': 'keydown',\n            'propagate': false,\n            'disable_in_input': false,\n            'target': document,\n            'keycode': false\n        };\n        if (!opt) opt = default_options;else {\n            for (var dfo in default_options) {\n                if (typeof opt[dfo] == 'undefined') opt[dfo] = default_options[dfo];\n            }\n        }\n\n        var ele = opt.target;\n        if (typeof opt.target == 'string') ele = document.getElementById(opt.target);\n        var ths = this;\n        shortcut_combination = shortcut_combination.toLowerCase();\n\n        //The function to be called at keypress\n        var func = function func(e) {\n            e = e || window.event;\n            //console.log(e);\n\n            if (opt['disable_in_input']) {\n                //Don't enable shortcut keys in Input, Textarea fields\n                var element;\n                if (e.target) element = e.target;else if (e.srcElement) element = e.srcElement;\n                if (element.nodeType == 3) element = element.parentNode;\n\n                if (element.tagName == 'INPUT' || element.tagName == 'TEXTAREA') return;\n            }\n\n            //Find Which key is pressed\n            //if (e.code) code = e.code;\n            var code = '';\n            if (e.keyCode) code = e.keyCode;else if (e.which) code = e.which;\n            var character = String.fromCharCode(code).toLowerCase();\n\n            if (code == 188) character = \",\"; //If the user presses , when the type is onkeydown\n            if (code == 190) character = \".\"; //If the user presses , when the type is onkeydown\n\n            var keys = shortcut_combination.split(\"+\");\n            //Key Pressed - counts the number of valid keypresses - if it is same as the number of keys, the shortcut function is invoked\n            var kp = 0;\n\n            //Work around for stupid Shift key bug created by using lowercase - as a result the shift+num combination was broken\n            var shift_nums = {\n                \"`\": \"~\",\n                \"1\": \"!\",\n                \"2\": \"@\",\n                \"3\": \"#\",\n                \"4\": \"$\",\n                \"5\": \"%\",\n                \"6\": \"^\",\n                \"7\": \"&\",\n                \"8\": \"*\",\n                \"9\": \"(\",\n                \"0\": \")\",\n                \"-\": \"_\",\n                \"=\": \"+\",\n                \";\": \":\",\n                \"'\": \"\\\"\",\n                \",\": \"<\",\n                \".\": \">\",\n                \"/\": \"?\",\n                \"\\\\\": \"|\"\n                //Special Keys - and their codes\n            };var special_keys = {\n                'esc': 27,\n                'escape': 27,\n                'tab': 9,\n                'space': 32,\n                'return': 13,\n                'enter': 13,\n                'backspace': 8,\n\n                'scrolllock': 145,\n                'scroll_lock': 145,\n                'scroll': 145,\n                'capslock': 20,\n                'caps_lock': 20,\n                'caps': 20,\n                'numlock': 144,\n                'num_lock': 144,\n                'num': 144,\n\n                'pause': 19,\n                'break': 19,\n\n                'insert': 45,\n                'home': 36,\n                'delete': 46,\n                'end': 35,\n\n                'pageup': 33,\n                'page_up': 33,\n                'pu': 33,\n\n                'pagedown': 34,\n                'page_down': 34,\n                'pd': 34,\n\n                'left': 37,\n                'up': 38,\n                'right': 39,\n                'down': 40,\n\n                'f1': 112,\n                'f2': 113,\n                'f3': 114,\n                'f4': 115,\n                'f5': 116,\n                'f6': 117,\n                'f7': 118,\n                'f8': 119,\n                'f9': 120,\n                'f10': 121,\n                'f11': 122,\n                'f12': 123\n            };\n\n            var modifiers = {\n                shift: { wanted: false, pressed: false },\n                ctrl: { wanted: false, pressed: false },\n                alt: { wanted: false, pressed: false },\n                meta: { wanted: false, pressed: false //Meta is Mac specific\n                } };\n\n            if (e.ctrlKey) modifiers.ctrl.pressed = true;\n            if (e.shiftKey) modifiers.shift.pressed = true;\n            if (e.altKey) modifiers.alt.pressed = true;\n            if (e.metaKey) modifiers.meta.pressed = true;\n\n            var k = null;\n            for (var i = 0; k = keys[i], i < keys.length; i++) {\n                //Modifiers\n                if (k == 'ctrl' || k == 'control') {\n                    kp++;\n                    modifiers.ctrl.wanted = true;\n                } else if (k == 'shift') {\n                    kp++;\n                    modifiers.shift.wanted = true;\n                } else if (k == 'alt') {\n                    kp++;\n                    modifiers.alt.wanted = true;\n                } else if (k == 'meta') {\n                    kp++;\n                    modifiers.meta.wanted = true;\n                } else if (k.length > 1) {\n                    //If it is a special key\n                    if (special_keys[k] == code) kp++;\n                } else if (opt['keycode']) {\n                    if (opt['keycode'] == code) kp++;\n                } else {\n                    //The special keys did not match\n                    if (character == k) kp++;else {\n                        if (shift_nums[character] && e.shiftKey) {\n                            //Stupid Shift key bug created by using lowercase\n                            character = shift_nums[character];\n                            if (character == k) kp++;\n                        }\n                    }\n                }\n            }\n\n            if (kp == keys.length && modifiers.ctrl.pressed == modifiers.ctrl.wanted && modifiers.shift.pressed == modifiers.shift.wanted && modifiers.alt.pressed == modifiers.alt.wanted && modifiers.meta.pressed == modifiers.meta.wanted) {\n                callback(e);\n\n                if (!opt['propagate']) {\n                    //Stop the event\n                    //e.cancelBubble is supported by IE - this will kill the bubbling process.\n                    e.cancelBubble = true;\n                    e.returnValue = false;\n\n                    //e.stopPropagation works in Firefox.\n                    if (e.stopPropagation) {\n                        e.stopPropagation();\n                        e.preventDefault();\n                    }\n                    return false;\n                }\n            }\n        };\n        this.all_shortcuts[shortcut_combination] = {\n            'callback': func,\n            'target': ele,\n            'event': opt['type']\n        };\n        //Attach the function with the event\n        // 增加监听事件\n        if (ele.addEventListener) ele.addEventListener(opt['type'], func, false);else if (ele.attachEvent) ele.attachEvent('on' + opt['type'], func);else ele['on' + opt['type']] = func;\n    },\n\n    //Remove the shortcut - just specify the shortcut and I will remove the binding\n    'remove': function remove(shortcut_combination) {\n        shortcut_combination = shortcut_combination.toLowerCase();\n        var binding = this.all_shortcuts[shortcut_combination];\n        delete this.all_shortcuts[shortcut_combination];\n        if (!binding) return;\n        var type = binding['event'];\n        var ele = binding['target'];\n        var callback = binding['callback'];\n\n        if (ele.detachEvent) ele.detachEvent('on' + type, callback);else if (ele.removeEventListener) ele.removeEventListener(type, callback, false);else ele['on' + type] = false;\n    }\n    /*\n        var keyNum = window.event ? e.keyCode : e.which;  //获取被按下的键值\n    \n        //判断如果用户按下了回车键（keycody=13）\n        if (keyNum == 13) {\n            console.log(ENV.router.list);\n        }\n    \n        //判断如果用户按下了空格键(keycode=32)，\n        if (keyNum == 32) {\n            //Util.keyboardClick('space');\n        }\n        if(keyNum == 37) {\n            // console.log('左箭头');\n            flag_history = flag_history-1;\n            if(flag_history < 0){\n                flag_history = ENV.router.list.length-1;\n            }\n            console.log(flag_history);\n            wHistory.replaceState(null, '页面标题', '#/'+ENV.router.list[flag_history]);\n            //App.replaceHistory(flag_history, '页面标题', '#/'+ENV.router.list[flag_history])\n            wHistory.go(0)\n        }\n    */\n\n};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// shortcut.f0413.chunk.js","// module.exports = '测试方面指令';\n\n/**\n * 功能：快捷键\n * 作者：Abbott.liu\n * 时间：2017年11月23日\n * 描述：参考shortcut.js改写\n */\n\n// 默认的快捷键\n\n\nmodule.exports = {\n    // 默认的快捷键\n    'keyboardDefault':{\n        fullScreen:'Ctrl+E',\n        homePage:'Up', // 直接返回首页\n        endPage :'Down',\n        previousPage:'left',\n        nextPage:'right',\n        1:'1', //跳转到第一页\n        2:'2', //跳转到第一页\n        3:'3' //跳转到第一页\n    },\n    'all_shortcuts':{},\n    'add': function(shortcut_combination,callback,opt) {\n        //Provide a set of default options\n        // 提供参数\n        var default_options = {\n            'type':'keydown',\n            'propagate':false,\n            'disable_in_input':false,\n            'target':document,\n            'keycode':false\n        }\n        if(!opt) opt = default_options;\n        else {\n            for(var dfo in default_options) {\n                if(typeof opt[dfo] == 'undefined') opt[dfo] = default_options[dfo];\n            }\n        }\n\n        var ele = opt.target;\n        if(typeof opt.target == 'string') ele = document.getElementById(opt.target);\n        var ths = this;\n        shortcut_combination = shortcut_combination.toLowerCase();\n\n        //The function to be called at keypress\n        var func = function(e) {\n            e = e || window.event;\n            //console.log(e);\n\n            if(opt['disable_in_input']) { //Don't enable shortcut keys in Input, Textarea fields\n                var element;\n                if(e.target) element=e.target;\n                else if(e.srcElement) element=e.srcElement;\n                if(element.nodeType==3) element=element.parentNode;\n\n                if(element.tagName == 'INPUT' || element.tagName == 'TEXTAREA') return;\n            }\n\n            //Find Which key is pressed\n            //if (e.code) code = e.code;\n            var code = '';\n            if (e.keyCode) code = e.keyCode;\n            else if (e.which) code = e.which;\n            var character = String.fromCharCode(code).toLowerCase();\n\n            if(code == 188) character=\",\"; //If the user presses , when the type is onkeydown\n            if(code == 190) character=\".\"; //If the user presses , when the type is onkeydown\n\n            var keys = shortcut_combination.split(\"+\");\n            //Key Pressed - counts the number of valid keypresses - if it is same as the number of keys, the shortcut function is invoked\n            var kp = 0;\n\n            //Work around for stupid Shift key bug created by using lowercase - as a result the shift+num combination was broken\n            var shift_nums = {\n                \"`\":\"~\",\n                \"1\":\"!\",\n                \"2\":\"@\",\n                \"3\":\"#\",\n                \"4\":\"$\",\n                \"5\":\"%\",\n                \"6\":\"^\",\n                \"7\":\"&\",\n                \"8\":\"*\",\n                \"9\":\"(\",\n                \"0\":\")\",\n                \"-\":\"_\",\n                \"=\":\"+\",\n                \";\":\":\",\n                \"'\":\"\\\"\",\n                \",\":\"<\",\n                \".\":\">\",\n                \"/\":\"?\",\n                \"\\\\\":\"|\"\n            }\n            //Special Keys - and their codes\n            var special_keys = {\n                'esc':27,\n                'escape':27,\n                'tab':9,\n                'space':32,\n                'return':13,\n                'enter':13,\n                'backspace':8,\n\n                'scrolllock':145,\n                'scroll_lock':145,\n                'scroll':145,\n                'capslock':20,\n                'caps_lock':20,\n                'caps':20,\n                'numlock':144,\n                'num_lock':144,\n                'num':144,\n\n                'pause':19,\n                'break':19,\n\n                'insert':45,\n                'home':36,\n                'delete':46,\n                'end':35,\n\n                'pageup':33,\n                'page_up':33,\n                'pu':33,\n\n                'pagedown':34,\n                'page_down':34,\n                'pd':34,\n\n                'left':37,\n                'up':38,\n                'right':39,\n                'down':40,\n\n                'f1':112,\n                'f2':113,\n                'f3':114,\n                'f4':115,\n                'f5':116,\n                'f6':117,\n                'f7':118,\n                'f8':119,\n                'f9':120,\n                'f10':121,\n                'f11':122,\n                'f12':123\n            }\n\n            var modifiers = {\n                shift: { wanted:false, pressed:false},\n                ctrl : { wanted:false, pressed:false},\n                alt  : { wanted:false, pressed:false},\n                meta : { wanted:false, pressed:false}\t//Meta is Mac specific\n            };\n\n            if(e.ctrlKey)\tmodifiers.ctrl.pressed = true;\n            if(e.shiftKey)\tmodifiers.shift.pressed = true;\n            if(e.altKey)\tmodifiers.alt.pressed = true;\n            if(e.metaKey)   modifiers.meta.pressed = true;\n\n            var k = null;\n            for(var i=0; k=keys[i],i<keys.length; i++) {\n                //Modifiers\n                if(k == 'ctrl' || k == 'control') {\n                    kp++;\n                    modifiers.ctrl.wanted = true;\n\n                } else if(k == 'shift') {\n                    kp++;\n                    modifiers.shift.wanted = true;\n\n                } else if(k == 'alt') {\n                    kp++;\n                    modifiers.alt.wanted = true;\n                } else if(k == 'meta') {\n                    kp++;\n                    modifiers.meta.wanted = true;\n                } else if(k.length > 1) { //If it is a special key\n                    if(special_keys[k] == code) kp++;\n\n                } else if(opt['keycode']) {\n                    if(opt['keycode'] == code) kp++;\n\n                } else { //The special keys did not match\n                    if(character == k) kp++;\n                    else {\n                        if(shift_nums[character] && e.shiftKey) { //Stupid Shift key bug created by using lowercase\n                            character = shift_nums[character];\n                            if(character == k) kp++;\n                        }\n                    }\n                }\n            }\n\n            if(kp == keys.length &&\n                modifiers.ctrl.pressed == modifiers.ctrl.wanted &&\n                modifiers.shift.pressed == modifiers.shift.wanted &&\n                modifiers.alt.pressed == modifiers.alt.wanted &&\n                modifiers.meta.pressed == modifiers.meta.wanted) {\n                callback(e);\n\n                if(!opt['propagate']) { //Stop the event\n                    //e.cancelBubble is supported by IE - this will kill the bubbling process.\n                    e.cancelBubble = true;\n                    e.returnValue = false;\n\n                    //e.stopPropagation works in Firefox.\n                    if (e.stopPropagation) {\n                        e.stopPropagation();\n                        e.preventDefault();\n                    }\n                    return false;\n                }\n            }\n        }\n        this.all_shortcuts[shortcut_combination] = {\n            'callback':func,\n            'target':ele,\n            'event': opt['type']\n        };\n        //Attach the function with the event\n        // 增加监听事件\n        if(ele.addEventListener) ele.addEventListener(opt['type'], func, false);\n        else if(ele.attachEvent) ele.attachEvent('on'+opt['type'], func);\n        else ele['on'+opt['type']] = func;\n    },\n\n    //Remove the shortcut - just specify the shortcut and I will remove the binding\n    'remove':function(shortcut_combination) {\n        shortcut_combination = shortcut_combination.toLowerCase();\n        var binding = this.all_shortcuts[shortcut_combination];\n        delete(this.all_shortcuts[shortcut_combination])\n        if(!binding) return;\n        var type = binding['event'];\n        var ele = binding['target'];\n        var callback = binding['callback'];\n\n        if(ele.detachEvent) ele.detachEvent('on'+type, callback);\n        else if(ele.removeEventListener) ele.removeEventListener(type, callback, false);\n        else ele['on'+type] = false;\n    }\n}\n/*\n    var keyNum = window.event ? e.keyCode : e.which;  //获取被按下的键值\n\n    //判断如果用户按下了回车键（keycody=13）\n    if (keyNum == 13) {\n        console.log(ENV.router.list);\n    }\n\n    //判断如果用户按下了空格键(keycode=32)，\n    if (keyNum == 32) {\n        //Util.keyboardClick('space');\n    }\n    if(keyNum == 37) {\n        // console.log('左箭头');\n        flag_history = flag_history-1;\n        if(flag_history < 0){\n            flag_history = ENV.router.list.length-1;\n        }\n        console.log(flag_history);\n        wHistory.replaceState(null, '页面标题', '#/'+ENV.router.list[flag_history]);\n        //App.replaceHistory(flag_history, '页面标题', '#/'+ENV.router.list[flag_history])\n        wHistory.go(0)\n    }\n*/\n\n\n\n// WEBPACK FOOTER //\n// ./src/dashboard/utils/shortcut.js"],"sourceRoot":""}